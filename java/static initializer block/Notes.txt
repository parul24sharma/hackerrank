Static block Features:
1) Its of 4 types
    i) Static Block i.e. { .. }
    ii) Static method i.e. static void test(){ .. }
    iii) Static variables i.e. static int var;
    iv) Static class (It needs to be nested) i.e. 
        class Parent{ 
            static class Child{
                ...
            } 
        }
2)Dfault values for static variables
    (Scope decides the default value)
    i) If inside class scope Default=0
    ii) If inside block scope Default = needs to be initialized, else CompileT-Err
3)Static block is loaded before main method
    Loading heirarchy :
    i) Compile time(Everything loads here)
        packages loaded > files imported > class loads > compile time error check runs
    2) Run Time(Everything executes here)
        Anonymous Block > static block > main method > called methods got executed(Control Flow)
4)Static members are Class level 
    They hold single value for different objects of the class
    class Test{
        static int age = 16;
        public static void main(String ar[]){
            Test t1 = new Test();
            Test t2 = new Test();
            t1.age = 13;
            System.out.println(t2.age); //output 13
        }
    }
5)Accessing static members
    (accessed without making any objects)
    i) Direct : System.out.println(age);
    ii) ClassName : System.out.println(Test.age);
6)What is the sole purpose of Static 
    i) instead of creating an instance of a class to use that method, you can just use the class name
    ii) saves memory by not constructing an object every time to use a particular method.
    iii) save memory by creating common values(common var and methods) for all objects
    iv) We can provide some logic to the class variables while they are being assigned.

    to initialize class variables with some logic
7)Static methods can be overloaded but not overridable

Things that I need to clear :

static members can only refer to static members. Instance members can, of course access static members.
Side note: Of course, static members can access instance members through an object reference.
Instance methods can access instance variables and instance methods directly.
Instance methods can access class variables and class methods directly.
Class methods can access class variables and class methods directly.
Class methods cannot access instance variables or instance methods directlyâ€”they must use an object reference.
Also, class methods cannot use the this keyword as there is no instance for this to refer to.
